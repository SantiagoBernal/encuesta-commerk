{"version":3,"file":"static/js/851.ca3c35a2.chunk.js","mappings":"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","sources":["components/dashboard/CircularLoading.js","components/dashboard/Todos.js","views/ui/Todos.js"],"sourcesContent":["import React from 'react';\r\nimport { CircularProgress } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nfunction CircularLoading() {\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ minHeight: '100vh' }}\r\n    >\r\n      <CircularProgress/>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default CircularLoading;","// import {\r\n//   Card, CardBody,\r\n//   CardSubtitle, Table,\r\n//   Pagination,\r\n//   PaginationItem,\r\n//   PaginationLink\r\n// } from \"reactstrap\";\r\nimport React, {\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\n\r\nimport axios from 'axios';\r\nimport CircularLoading from \"./CircularLoading\";\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableSortLabel from '@mui/material/TableSortLabel';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\n// import { Link } from 'react-router';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport { visuallyHidden } from '@mui/utils';\r\n// import DeleteOutlineOutlinedIcon from \"@mui/icons-material/DeleteOutlineOutlined\";\r\n\r\n\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) {\r\n            return order;\r\n        }\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    {\r\n        id: 'estado_encuesta',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Estado',\r\n    },\r\n    {\r\n        id: 'codigo_sn',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Codigo',\r\n    },\r\n    {\r\n        id: 'nombre_sn',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Nombre',\r\n    },\r\n    {\r\n        id: 'correo_electronico',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Correo',\r\n    },\r\n    {\r\n        id: 'correo_recepcion',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Correo Recepcion',\r\n    },\r\n    {\r\n        id: 'Telefono_movil',\r\n        numeric: false,\r\n        disablePadding: true,\r\n        label: 'Movil',\r\n    }, {\r\n        id: 'telefono_1',\r\n        numeric: false,\r\n        disablePadding: true,\r\n        label: 'Telefono1',\r\n    },\r\n    {\r\n        id: 'telefono_2',\r\n        numeric: false,\r\n        disablePadding: true,\r\n        label: 'Telefono2',\r\n    },\r\n\r\n    {\r\n        id: 'nombre_grupo',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Grupo',\r\n    },\r\n    {\r\n        id: 'codigo_proyecto',\r\n        numeric: false,\r\n        disablePadding: false,\r\n        label: 'Proyecto',\r\n    },\r\n\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n        props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        color=\"primary\"\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{\r\n                            'aria-label': 'select all desserts',\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <Box component=\"span\" sx={visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </Box>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction EnhancedTableToolbar(props) {\r\n    const { numSelected } = props;\r\n\r\n    return (\r\n        <Toolbar\r\n            sx={{\r\n                pl: { sm: 2 },\r\n                pr: { xs: 1, sm: 1 },\r\n                ...(numSelected > 0 && {\r\n                    bgcolor: (theme) =>\r\n                        alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n                }),\r\n            }}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography\r\n                    sx={{ flex: '1 1 100%' }}\r\n                    color=\"inherit\"\r\n                    variant=\"subtitle1\"\r\n                    component=\"div\"\r\n                >\r\n                    {numSelected} Seleccionados\r\n                </Typography>\r\n            ) : (\r\n                <Typography\r\n                    sx={{ flex: '1 1 100%' }}\r\n                    variant=\"h6\"\r\n                    id=\"tableTitle\"\r\n                    component=\"div\"\r\n                >\r\n                    Clientes encuestados\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton>\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n        </Toolbar>\r\n    );\r\n}\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst ProjectTables = (props) => {\r\n\r\n    // const [clientes, setClientes] = useState();\r\n    // const pageSize = 5;\r\n    // const [currentState, setCurrentState] = useState(0);\r\n    // const [pageState, setPageState] = useState(0);\r\n\r\n\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    // const [dense, setDense] = React.useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    // const [rowsNew, setRowsNew] = React.useState(list);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [rows, setRowse] = React.useState([]);\r\n \r\n \r\n    //console.log(\"anchorEl\", anchorEl)\r\n\r\n    const fetchUserData = async () => {\r\n        setIsLoading(true);\r\n        await axios({\r\n            method: \"GET\",\r\n            withCredentials: true,\r\n            url: `${process.env.REACT_APP_BACKEND_URL}/cliente/lista`,\r\n        }).then((res) => {\r\n            setRowse(res.data);\r\n            setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchUserData();\r\n    }, [])\r\n\r\n    //console.log(\"rows\", rows)\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked && rows.length > 0) {\r\n            const newSelected = rows?.map((n) => n.id_cliente);\r\n            setSelected(newSelected);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n    //console.log(\"selected\", selected)\r\n    //console.log(\"selectedcliente\", selectedcliente)\r\n\r\n    const handleClick = (event, id) => {\r\n        const selectedIndex = selected.indexOf(id);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, id);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (id) => selected.indexOf(id) !== -1;\r\n\r\n\r\n    const emptyRows =\r\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n    const visibleRows = React.useMemo(\r\n        () =>\r\n            stableSort(rows, getComparator(order, orderBy)).slice(\r\n                page * rowsPerPage,\r\n                page * rowsPerPage + rowsPerPage,\r\n            ),\r\n        [order, orderBy, page, rowsPerPage, rows],\r\n    );\r\n\r\n\r\n\r\n\r\n    return (\r\n        isLoading ? <CircularLoading /> :\r\n            <div>\r\n                <Box sx={{ width: '100%' }}>\r\n                    <Paper sx={{ width: '100%', mb: 2 }}>\r\n                        <EnhancedTableToolbar numSelected={selected.length} />\r\n                        <TableContainer>\r\n                            <Table\r\n                                sx={{ minWidth: 750 }}\r\n                                aria-labelledby=\"tableTitle\"\r\n                                size={'small'}\r\n                            >\r\n                                <EnhancedTableHead\r\n                                    numSelected={selected.length}\r\n                                    order={order}\r\n                                    orderBy={orderBy}\r\n                                    onSelectAllClick={handleSelectAllClick}\r\n                                    onRequestSort={handleRequestSort}\r\n                                    rowCount={rows?.length}\r\n                                />\r\n                                <TableBody>\r\n                                    {visibleRows.map((row, index) => {\r\n                                        const isItemSelected = isSelected(row.id_cliente);\r\n                                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                        return (\r\n\r\n                                            <TableRow\r\n                                                hover\r\n                                                onClick={(event) => handleClick(event, row.id_cliente)}\r\n                                                role=\"checkbox\"\r\n                                                aria-checked={isItemSelected}\r\n                                                tabIndex={-1}\r\n                                                key={row.id_cliente}\r\n                                                selected={isItemSelected}\r\n                                                sx={{ cursor: 'pointer' }}\r\n                                                options={{\r\n                                                    exportButton: true,\r\n                                                }}\r\n                                            >\r\n                                                <TableCell padding=\"checkbox\">\r\n                                                    <Checkbox\r\n                                                        color=\"primary\"\r\n                                                        checked={isItemSelected}\r\n                                                        inputProps={{\r\n                                                            'aria-labelledby': labelId,\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    sx={{\r\n                                                        fontFamily: ' sans-serif',\r\n                                                        color: row.estado_encuesta === false ? 'red': 'green' ,\r\n                                                        '& .MuiSlider-thumb': {\r\n                                                            borderRadius: '1px',\r\n                                                        },\r\n                                                    }}\r\n                                                    align=\"center\" padding='normal'>\r\n                                                    <b>{row.estado_encuesta === true ? \"OK\" : \"NO\"}</b>\r\n                                                </TableCell>\r\n                                                <TableCell\r\n                                                    component=\"th\"\r\n                                                    id={labelId}\r\n                                                    scope=\"row\"\r\n                                                    padding=\"none\"\r\n                                                >\r\n                                                    {row.codigo_sn}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\" padding='none' >{row.nombre_sn}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.correo_electronico}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.correo_recepcion}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.telefono_movil}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.telefono_1}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.telefono_2}</TableCell>\r\n\r\n                                                <TableCell align=\"center\" padding='normal'>{row.nombre_grupo}</TableCell>\r\n                                                <TableCell align=\"center\" padding='normal'>{row.codigo_proyecto}</TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                                    {emptyRows > 0 && (\r\n                                        <TableRow\r\n                                            style={{\r\n                                                height: ( 33) * emptyRows,\r\n                                            }}\r\n                                        >\r\n                                            <TableCell colSpan={6} />\r\n                                        </TableRow>\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <TablePagination\r\n                            labelRowsPerPage=\" Filas por página\"\r\n                            // labelDisplayedRows={({ from, to, count }) => `Displaying pages ${from}-${to} of total ${count} pages`}\r\n                            rowsPerPageOptions={[5, 10, 25]}\r\n                            component=\"div\"\r\n                            count={rows?.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </Paper>\r\n                    {/* <FormControlLabel\r\n            control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n            label=\"Dense padding\"\r\n          /> */}\r\n                </Box>\r\n            </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ProjectTables;\r\n","import ProjectTables from \"../../components/dashboard/Todos\";\r\nimport { Row, Col,\r\n  //  Table, Card, CardTitle, CardBody\r\n   } from \"reactstrap\";\r\n\r\nconst Tables = () => {\r\n  return (\r\n    <Row>\r\n      <Col lg=\"12\">\r\n        <ProjectTables />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n"],"names":["_jsx","Grid","container","spacing","alignItems","justify","style","minHeight","children","CircularProgress","descendingComparator","a","b","orderBy","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","onSelectAllClick","order","numSelected","rowCount","onRequestSort","TableHead","_jsxs","TableRow","TableCell","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","map","headCell","align","sortDirection","TableSortLabel","active","direction","onClick","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","Toolbar","pl","sm","pr","xs","bgcolor","theme","alpha","palette","primary","main","action","activatedOpacity","Typography","flex","variant","Tooltip","title","IconButton","DeleteIcon","FilterListIcon","setOrder","React","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","isLoading","setIsLoading","useState","rows","setRowse","useEffect","async","axios","method","withCredentials","url","concat","process","then","res","data","fetchUserData","emptyRows","Math","max","length","visibleRows","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","CircularLoading","width","Paper","mb","TableContainer","Table","minWidth","size","target","newSelected","n","id_cliente","handleRequestSort","TableBody","row","isItemSelected","indexOf","labelId","hover","handleClick","selectedIndex","role","tabIndex","cursor","options","exportButton","fontFamily","estado_encuesta","borderRadius","scope","codigo_sn","nombre_sn","correo_electronico","correo_recepcion","telefono_movil","telefono_1","telefono_2","nombre_grupo","codigo_proyecto","height","colSpan","TablePagination","labelRowsPerPage","rowsPerPageOptions","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","parseInt","value","Tables","Row","Col","lg","ProjectTables"],"sourceRoot":""}