{"version":3,"file":"static/js/57.b3060883.chunk.js","mappings":"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","sources":["views/ui/Agregar.js"],"sourcesContent":["\r\nimport {\r\n    Card,\r\n    Row\r\n} from \"reactstrap\";\r\nimport Button from '@mui/material/Button';\r\nimport React, {\r\n    useState\r\n} from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport FileUploadIcon from '@mui/icons-material/FileUpload';\r\nimport * as XLSX from 'xlsx/xlsx.mjs';\r\nimport { styled } from '@mui/material/styles';\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst Div = styled('div')(({ theme }) => ({\r\n    ...theme.typography.button,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(0),\r\n}));\r\n\r\n\r\nconst EXTENSIONS = ['xlsx', 'xls', 'csv']\r\n\r\n\r\nconst Agregar = () => {\r\n\r\n    const [clientes, setClientes] = useState([]);\r\n  \r\n    const [alert, setAlert] = useState(false);\r\n  \r\n\r\n\r\n\r\n    const getExention = (file) => {\r\n        const parts = file.name.split('.')\r\n        const extension = parts[parts.length - 1]\r\n        return EXTENSIONS.includes(extension) // return boolean\r\n    }\r\n\r\n    const convertToJson = (headers, data) => {\r\n        const rows = []\r\n        data.forEach(row => {\r\n            let rowData = {}\r\n            row.forEach((element, index) => {\r\n                rowData[headers[index]] = element\r\n            })\r\n            rows.push(rowData)\r\n        });\r\n        return rows\r\n    }\r\n\r\n    const hiddenFileInput = React.useRef(null);\r\n\r\n    const handleClick = event => {\r\n        hiddenFileInput.current.click();\r\n    };\r\n\r\n    const importExcel = (e) => {\r\n        const file = e.target.files[0]\r\n        const reader = new FileReader()\r\n        reader.onload = (event) => {\r\n            const bstr = event.target.result\r\n            const workBook = XLSX.read(bstr, { type: \"binary\" })\r\n            const workSheetName = workBook.SheetNames[0]\r\n            const workSheet = workBook.Sheets[workSheetName]\r\n            const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\r\n            //console.log(fileData)\r\n            const headers = fileData[0]\r\n            fileData.splice(0, 1)\r\n            const dataUsers = convertToJson(headers, fileData)\r\n            const users = [];\r\n            if (dataUsers.length > 0) {\r\n                for (let i = 0; i < dataUsers.length; i++) {\r\n                    if (!dataUsers[i].telefono_1) {\r\n                        dataUsers[i].telefono_1 = \"0\";\r\n                    }\r\n                    if (!dataUsers[i].telefono_2) {\r\n                        dataUsers[i].telefono_2 = \"0\";\r\n                    }\r\n                    const estado_encuesta = false;\r\n                    dataUsers[i].estado_encuesta = estado_encuesta;\r\n                    users.push(dataUsers[i])\r\n                }\r\n                setClientes(dataUsers)\r\n            }\r\n            // console.log(\"convertToJson(headers, fileData) \", convertToJson(headers, fileData))\r\n        }\r\n\r\n        if (file) {\r\n            if (getExention(file)) {\r\n                reader.readAsBinaryString(file)\r\n            }\r\n            else {\r\n                alert(\"Invalid file input, Select Excel, CSV file\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        for (let i = 0; i < clientes.length; i++) {\r\n            try {\r\n                const response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/cliente/nuevo`, clientes[i]);\r\n                //console.log(\"Post created:\", response);\r\n                if (response.status === 200) {\r\n                    //console.log(\"cliente guardado\");\r\n                    setAlert(true);\r\n                    setClientes([]);\r\n                    //console.log(\"response.data\", response.config.data);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error creating post:\", error);\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    //console.log(\"clientes \", clientes)\r\n\r\n    return (\r\n        <Row>\r\n            <Card sx={{ maxWidth: 345 }}>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                        <Div>{clientes && clientes.length > 0 ? \"Se cargaron \" : \"Cargar \"} <b>  {clientes && clientes.length > 0 ? clientes.length : \"\"}  </b>  {\" Clientes\"}</Div>\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        Seleccione un archivo de Excel para cargar los clientes.\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <div className=\"button-group\">\r\n                        <label>\r\n                            <input\r\n                                type=\"file\"\r\n                                style={{ display: 'none' }}\r\n                                onChange={importExcel}\r\n                                ref={hiddenFileInput}\r\n                            />\r\n\r\n                            <Stack alignContent=\"contained\" direction=\"row\" spacing={5}>\r\n                                <Button onClick={handleClick}\r\n                                    variant=\"outlined\" size=\"large\" startIcon={<FileUploadIcon />}>\r\n                                    Cargar\r\n                                </Button>\r\n                                <Button onClick={handleSubmit}\r\n                                    variant=\"contained\" size=\"large\" endIcon={<SaveIcon />}>\r\n                                    Guardar\r\n                                </Button>\r\n                            </Stack>\r\n\r\n\r\n\r\n                        </label>\r\n                    </div>\r\n                </CardActions>\r\n                {alert ?\r\n                    <Stack sx={{ width: '100%' }} spacing={2}>\r\n                        <Alert severity=\"success\">\r\n                            <AlertTitle>Exito!</AlertTitle>\r\n                            Se guardaron los clientes correctamente.\r\n                        </Alert>\r\n                    </Stack>\r\n                    : <></>}\r\n            </Card>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n    );\r\n};\r\n\r\nexport default Agregar;\r\n"],"names":["Div","styled","_ref","theme","typography","button","backgroundColor","palette","background","paper","padding","spacing","EXTENSIONS","Agregar","clientes","setClientes","useState","alert","setAlert","hiddenFileInput","React","_jsx","Row","children","_jsxs","Card","sx","maxWidth","CardContent","Typography","gutterBottom","variant","component","length","color","CardActions","className","type","style","display","onChange","e","file","target","files","reader","FileReader","onload","event","bstr","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","fileData","sheet_to_json","header","headers","splice","dataUsers","convertToJson","data","rows","forEach","row","rowData","element","index","push","users","i","telefono_1","telefono_2","estado_encuesta","parts","name","split","extension","includes","getExention","readAsBinaryString","ref","Stack","alignContent","direction","Button","onClick","current","click","size","startIcon","FileUploadIcon","async","preventDefault","axios","post","concat","process","status","error","console","endIcon","SaveIcon","width","Alert","severity","AlertTitle","_Fragment"],"sourceRoot":""}